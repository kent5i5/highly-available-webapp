Description: >
 This template deploys 4 Ubuntu 18 server with two vCPUs and at least 4GB of RAM and 10GB of disk space.
 2 server will be located in each of your private subnets. Data will be retrieve from S3 bucket. 
 Triffic will go through a load balancer
 ying kit ng Feb 13, 2020
Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
    
    PublicSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/24
    PrivateSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.1.0/24
Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # ProfileWithRoalesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
      # Roles:
      #   - UdacityS3ReadOnlyEC2
  
      #     #!/bin/bash
      #     apt-get update -y
      #     apt-get install unzip awscli -y
      #     apt-get install apache2 -y
      #     systemctl start apache2.service
      #     cd /var/www/html
      #     aws s3 cp s3://udacity-demo-1/udacity.zip .
      #     unzip -o udacity.zip
    yingsUdacityVPC:
        Type: AWS::EC2::VPC
        Properties: 
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            # EnableDnsSupport: Boolean
            # InstanceTenancy: String
            Tags: 
                - Key: Name
                  Value: !Ref EnvironmentName
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name 
                  Value: !Ref EnvironmentName

    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref yingsUdacityVPC
            InternetGatewayId: !Ref InternetGateway

    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref yingsUdacityVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} PublicSubnet (AZ1)

    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref yingsUdacityVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetCIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
                
    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: AttachGateway
        Properties: 
            Domain: vpc
    
    NatGateway: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet
    
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref yingsUdacityVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
    
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    
    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
    
    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref yingsUdacityVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet

# Outputs: 
  #Bonus points for useful outputs!
  # Description: output will be the public URL of loadbalancer
  # Value:  { "Fn::Join" : ["", ["http://", { "Ref" : "URL" } ]] },
  # Export:
  #   Name: applicationURL